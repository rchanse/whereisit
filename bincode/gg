#!/usr/bin/env bash

# collect and remember command line values fro $@ 
read -r mkey mp1 mp2 mp3 mprest <<< $@

# set my editor as global variable
export myeditor="vim"
# export myeditor="mousepad"
# export myeditor="nano"

base_dir="etc"               # used so $HOME/$base_dir will hold the
                              # directory for 'parms' list.
parm_dir=$HOME/$base_dir
if [ ! -d $parm_dir ]; then
  mkdir -p $parm_dir
fi

# main driver portion is at bottom since in bash
# in line functions must precede their 'call'
# find  gg-start code.

#functions  ech0, nop, is_integer, in_range, list_by_number, ggwork 

# debugging I left in the debugging echos but left off,
# to turn them on  BEFORE issuing ff  issue export ech0=ON  
function ech0 () {               # debugging echo
  if [ ".$ech0" == ".ON" ]; then
    echo $@
  fi  
}

function nop() {    # a NO-OP to make code more readable later
#  VERY helpful making easier to aid in  if-then-else-fi blocks
#  if condition ; then         remember   if cond ; then
#     nop                                    code

# NOTE:NOTE - much easier to use true  NOTE:NOTE 

#  else                                   else
#     nop                                 fi      will gen synax error
#  fi
#
  return 0
}

#=================================================ggwork-start
# the code below is a function to do the g - work
# note it has several internal subfunctions.
function ggwork () {

# list functions

# checking for an integer type value  found linuxquestion
function is_integer() {
  printf "%d" $1 > /dev/null 2>&1
  return $?
}

# checking for an integer is in range  between 1 and nl
function in_range() {
  if [ $1 -ge 1 ] && [ $1 -le $nl ] ; then
    return 0
  else
    return 1 
  fi
}

# used in show option to list NAMES_list entries and their assoc number
function list_by_number() { 
echo "List of names file " $NAMES_list "has" $nl "entries"

  while read -r line_info ; do
    echo $line_info
  done < $NAMES_list
  exit
 }

# end of functions

# start of ggwork code
ech0 " ggwork  $1 $2 $3 $4 $5 $6"
#gwork $assoc_file $mkey $mp1 $mp2 $mp3 $mprest
read -r assoc_file mkey mp1 mp2 mp3 mprest <<< $@
assocparm=`basename $assoc_file`
assocparm_dir=`dirname $assoc_file`
assoc_file=$1
sub1=$2
sub2=$3
sub3=$4
sub4=$5
ech0 " 1 $sub1, 2 $sub2, 3 $sub3, 4 $sub4"
#read -r parm_dir rest < $rchbls/execdir  #<<comment
echo "gnamelist is  ===>>$assocparm<<====="
echo "in $assocparm_dir"
#parm_dir/gg_assoclist_dir/$assocparm "

# shorten gnamelist to $NAMES_list
NAMES_list=$assoc_file
nl=`wc $NAMES_list | awk '{print $1}'`
ech0 "\$nl $nl - size of $NAMES_list"
ech0 "\$NAMES_list $NAMES_list"
ech0 "\$sub1 $sub1"
if [ "$sub1" == "show" ]; then
  action=show
fi
if [ ".$sub1" == ".0" ] || [ ".$sub1" == ".." ]; then 
  action=vimit
fi

if [ "$sub1" == "rep" ]; then
  action=overlay
  ech0 $action
fi

if [ "$sub1" == "add" ]; then
  action=extend
fi

if [ ".$sub1" == ".q" ]; then
     ech0 "locate $sub2"
     locate $sub2 > ~/tempname
     touch ~/tempname
     echo "gg rep ~/tempname  "    # note NESTED call
     gg rep ~/tempname      # NOTE!!!!    NESTED call
     action=noop
fi
ech0 "\$action $action"

case "$action" in

"noop" )
  ;;

"vimit" )
  $myeditor $NAMES_list       # /home/$USER/bin/gnamelistM
  ;;

"show" )
  list_by_number  $assoc_file
  ;;

"overlay" )
  echo "Replacing "$NAMES_list" with "$mp1
  echo "cat $mp1 > $NAMES_list"
  cat $mp1 > $NAMES_list
  ;;

"extend" )
  echo "Extend "$NAMES_list" with "$mp1
  cat $mp1 >> $NAMES_list
  ;;

 * )  # The default action i 

if  is_integer $mkey; then
  if in_range $mkey; then
    theline=`head -n$mkey $NAMES_list  | tail -n1`
    read -r thefile q1 q2 q3 rest <<< $theline
    ech0 "theline $thefile $q1 $q2 $q3" 
    
    # handle the ~
    if [ ".${thefile:0:1}" == ".~" ] ; then
      tailend=${thefile:1}
      thefile=$HOME$tailend
    fi
    
    # handle the parmlib override  q1 q2 q3
    parm_ov=""
    if [ ".$q1" != "." ]; then parm_ov="$q1";fi
    if [ ".$q2" != "." ]; then parm_ov="$parm_ov $q2";fi
    if [ ".$q3" != "." ]; then parm_ov="$parm_ov $q3";fi

    #handle the cmdline override
    ech0 " 1 $mp1 2 $mp2 3 $mp3"
    cmd_ov=""
    if [ ".$mp1" != "." ]; then cmd_ov="$mp1";fi
    if [ ".$mp2" != "." ]; then cmd_ov="$cmd_ov $mp2";fi
    if [ ".$mp3" != "." ]; then cmd_ov="$cmd_ov $mp3";fi
    
    echo "number: $mkey, file $thefile"
    cmd_action="$myeditor"        # the default
    echo "default       : $cmd_action"
    echo "parm override : $parm_ov"
    echo "cmd  override : $cmd_ov"
    
    if [ ".$parm_ov" != "." ]; then cmd_action=$parm_ov;fi
    if [ ".$cmd_ov" != "." ]; then cmd_action=$cmd_ov;fi

    echo "Created command : $cmd_action $thefile"
    $cmd_action $thefile
    #     vim $thefile     # <<=== poor default
  else
    echo "$parm1 is NOT in RANGE  1 .. $nl"
  fi
else
  echo "$parm1 is NOT an integer"
  echo "you hit the default - handle what is left"
  echo "how to handle  $parm1  is unknown "
fi
  ;;
esac

return       # back to gg wrapper call
}
########## end of ggwork function <<============


# gg-start of gg code <<====================

# insure directory of separate members. exists."
# this is a one-time  first-time ONLY
if [ -d $parm_dir/gg_assoclist_dir ]; then
    ech0 "subdir exists $parm_dir/gg_assoclist_dir  "
else
    ech0 "create the necessary subdir" 
    mkdir -p $parm_dir/gg_assoclist_dir
    mc=$?
    ech0 "mkdir code $mc"
    touch $parm_dir/gg_assoclist_dir/firsttime  # default entry empty
    sleep 1
    dummy=" gg(assoc)  ov1 ov2 ov3 rest"
    echo "$dummy" > $parm_dir/gg_assoclist_dir/firsttime
fi

# setting the value of original current subdir
if [ -f $parm_dir/gg_assocname ]; then
    ech0 "filename of current subdir exists."  # skip setting
else
    ech0 "creating file for current subdir."
    touch $parm_dir/gg_assocname
    sleep 1              # time to populate (first time only)
    echo "firsttime" > $parm_dir/gg_assocname
fi

read -r current_gnamelist rest < $parm_dir/gg_assocname
ech0 "\current_gnamelist $current_gnamelist"
ech0 "in directory $parm_dir/gg_assoclist_dir"

if [ ".$mkey" == "." ]; then
  clear
cat << EOF-usage
::: usage ::::::::::::::::::::::::::::::::::::::
Name: gg - used to extend g to user chose projects

syntax gg parm1  ov1 ov2 ov3 rest
  parm1:
    Activate/Inactivate/choose the name of the gnamelist file in use.
    set/SET  - prompts for the name
    null - display help and filename
    0 or . - the gnamelist
    num- handle the num-th item 
    rep file - overlay gnamelist with file
    add file - concate file to list.

 Currently using ==>>$current_gnamelist<<=======
  in directory  $parm_dir/gg_assoclist_dir

  Choices: 
EOF-usage
  #ls $rchbls/gg_assoclist_dir   #<<comment
  ls $parm_dir/gg_assoclist_dir               #<<insert
  exit 4
fi

p1=$mkey

# Remove on/ON off/OFF  replace with set/SET
if [ ".$p1" == ".set" ]; then
  p1="SET" 
fi

if [ ".$p1" == ".SET" ]; then 
   echo -n "Enter the assocparm file name : "
   read -r answer   rest
   assocparm=$answer 
   echo $assocparm > $parm_dir/gg_assocname # set new curr dir
   echo "Using >"$assocparm" in $parm_dir/gg_assoclist_dir dir."
   if [ ! -f $parm_dir/gg_assoclist_dir/$assocparm ]; then
     dummy=" gg(assoc)  ov1 ov2 ov3 rest"
     echo "$dummy" > $parm_dir/gg_assoclist_dir/$assocparm 
   fi
   exit 0
fi

# set up to call ggwork   (which will do the job.)
read -r assocparm rest < $parm_dir/gg_assocname
assoc_file=$parm_dir/gg_assoclist_dir/$assocparm
ech0 "ggwork $assoc_file $mkey $mp1 $mp2 $mp3 $mprest" 
ggwork $assoc_file $mkey $mp1 $mp2 $mp3 $mprest
ech0 "I have returned."
